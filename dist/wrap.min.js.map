{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","wrap.min.js","src/util.js","src/wrap.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","wrap","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","getType","obj","toString","slice","toLowerCase","getHashCode","hash","type","len","prop","str","_i","_len","charCodeAt","getIterator","value","index","next","done","items","Object","keys","key","defineProperty","2","_classCallCheck","instance","Constructor","TypeError","Wrapper","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","protoProps","staticProps","prototype","_util","supportsIterator","Symbol","iterator","set","debugging","listeners","forEach","fn","JSON","stringify","push","parse","msg","console","log","_debug","arguments","undefined","hashCode","./util"],"mappings":";CAAA,SAAAA,GAAA,GAAA,gBAAAC,UAAA,mBAAAC,QAAAA,OAAAD,QAAAD,QAAA,IAAA,kBAAAG,SAAAA,OAAAC,IAAAD,UAAAH,OAAA,CAAA,GAAAK,EAAAA,GAAA,mBAAAC,QAAAA,OAAA,mBAAAC,QAAAA,OAAA,mBAAAC,MAAAA,KAAAC,KAAAJ,EAAAK,KAAAV,MAAA,WAAA,MAAA,SAAAW,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAhB,GAAA,GAAAqB,OAAA,uBAAAL,EAAA,IAAA,MAAAhB,GAAAsB,KAAA,mBAAAtB,EAAA,GAAAuB,GAAAV,EAAAG,IAAAf,WAAAW,GAAAI,GAAA,GAAAQ,KAAAD,EAAAtB,QAAA,SAAAU,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAY,EAAAA,EAAAtB,QAAAU,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAf,QAAA,IAAA,GAAAmB,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAW,OAAAT,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAW,GAAA,SAAAP,EAAAjB,EAAAD,GCEA,YCUO,SAAS0B,GAAQC,GACpB,MAAOC,GAASL,KAAKI,GAAKE,MAAM,MAAOC,cAWpC,QAASC,GAAYJ,GACxB,GAAIK,GAAO,EACLC,EAAOP,EAAQC,EACrB,QAAQM,GACJ,IAAK,OACL,IAAK,YACD,MAAO,EACX,KAAK,QACD,IAAK,GAAId,GAAI,EAAGe,EAAMP,EAAIH,OAAQL,EAAIe,EAAKf,IACvCa,GAAQD,EAAYZ,EAAIY,EAAYJ,EAAIR,IAE5C,OAAOa,EACX,KAAK,SACD,IAAK,GAAMG,KAAQR,GACfK,GAAQD,EAAYI,EAAOJ,EAAYJ,EAAIQ,IAE/C,OAAOH,EACX,SAEI,IAAK,GADCI,GAAMT,EAAIC,WACPS,EAAI,EAAGC,EAAMF,EAAIZ,OAAQa,EAAIC,EAAKD,IACvCL,GAAUA,GAAQ,GAAKA,EAAQI,EAAIG,WAAWF,GAAM,UAExD,OAAOL,IAaZ,QAASQ,GAAYC,EAAOR,GAC/B,MAAa,UAATA,EACO,WACH,GAAIS,GAAQ,EACNlB,EAASiB,EAAMjB,MACrB,QACImB,KADG,WAEC,MAAID,GAAQlB,GACAiB,MAAOA,EAAMC,OAEjBE,MAAM,MAKvB,WACH,GAAIF,GAAQ,EACNG,EAAQC,OAAOC,KAAKN,GACpBjB,EAASqB,EAAMrB,MACrB,QACImB,KADG,WAEC,GAAID,EAAQlB,EAAQ,CAChB,GAAMwB,GAAMH,EAAMH,IAClB,QAAQD,OAAQO,EAAKP,EAAMO,KAE/B,OAAQJ,MAAM,MDhF9BE,OAAOG,eAAejD,EAAS,cAC3ByC,OAAO,IAEXzC,ECKgB0B,QAAAA,EDJhB1B,ECgBgB+B,YAAAA,EDfhB/B,ECkDgBwC,YAAAA,CAxDhB,IAAMZ,MAAcA,cDiGdsB,GAAG,SAAShC,EAAQjB,EAAOD,GACjC,YAeA,SAASmD,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCEqHjG,QAAS7C,GAAKgC,GACzB,MAAO,IAAIc,GAAQd,GFnIvBK,OAAOG,eAAejD,EAAS,cAC3ByC,OAAO,GAGX,IAAIe,GAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIxC,GAAI,EAAGA,EAAIwC,EAAMnC,OAAQL,IAAK,CAAE,GAAIyC,GAAaD,EAAMxC,EAAIyC,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMjB,OAAOG,eAAeS,EAAQE,EAAWZ,IAAKY,IAAiB,MAAO,UAAUP,EAAaW,EAAYC,GAAiJ,MAA9HD,IAAYP,EAAiBJ,EAAYa,UAAWF,GAAiBC,GAAaR,EAAiBJ,EAAaY,GAAqBZ,KAKhiBrD,GAAAA,WEyHwBS,CAtOxB,IAAA0D,GAAAjD,EAAA,UAKMkD,EAAqC,kBAAXC,SAAyBA,OAAOC,SAS1Df,EAAA,WASF,QAAAA,GAAYd,GAAOU,EAAA3C,KAAA+C,GACf/C,KAAK+D,IAAI9B,GACTjC,KAAKgE,WAAY,EF4WrB,MA7OAhB,GAAaD,IACTP,IAAK,MACLP,MAAO,SExHPA,GACIjC,KAAKgE,UAGThE,KAAKiC,MAAQA,CACb,IAAMR,GAAOzB,KAAKyB,KAAKQ,IACnB2B,GACKC,OAAOC,WAAY9D,OACX,UAATyB,GAA6B,WAATA,IACxBzB,KAAK6D,OAAOC,WAAY,EAAAH,EAAA3B,aAAYC,EAAOR,IAE3C,aAAezB,OACfA,KAAKiE,UAAUC,QAAQ,SAACC,GAAD,MAAQA,GAAGlC,QFoItCO,IAAK,MACLP,MAAO,WEvHP,MAHIjC,MAAKgE,UAGFhE,KAAKiC,SFsIZO,IAAK,OACLP,MAAO,WE7HP,OAAO,EAAA0B,EAAAzC,SAAQlB,KAAKiC,UF2IpBO,IAAK,KACLP,MAAO,SEjIRR,GACC,MAAOzB,MAAKyB,KAAKzB,KAAKiC,SAAWR,EAAKH,iBF8ItCkB,IAAK,SACLP,MAAO,SEpIJd,GACH,MAAOnB,MAAKiC,QAAUd,KF8ItBqB,IAAK,UACLP,MAAO,WEtIPjC,KAAK+D,IAAI,SFkJTvB,IAAK,SACLP,MAAO,WEzIP,MAAOmC,MAAKC,UAAUrE,KAAKiC,UFsJ3BO,IAAK,UACLP,MAAO,SE7IHkC,GACE,aAAenE,QACjBA,KAAKiE,cAETjE,KAAKiE,UAAUK,KAAKH,MFyJpB3B,IAAK,WACLP,MAAO,WE/IP,OAAO,EAAA0B,EAAApC,aAAYvB,KAAKiC,UF6JxBO,IAAK,SACLP,MAAO,SEnJJkC,GACH,MAAOA,GAAGnE,KAAKiC,UF+JfO,IAAK,QACLP,MAAO,WErJP,MAAOmC,MAAKG,MAAMH,KAAKC,UAAUrE,KAAKiC,WFiKtCO,IAAK,MACLP,MAAO,SEzJPuC,GAEIC,SAAWA,QAAQC,KACnBD,QAAQC,IAAI1E,KAAKiC,MAAOuC,MFsK5BhC,IAAK,QACLP,MAAO,SE5JLuC,GACF,KAAM,IAAI5D,OAAM4D,MFuKhBhC,IAAK,QACLP,MAAO,WE/JS,GAAd0C,KAAcC,UAAA5D,OAAA,GAAA6D,SAAAD,UAAA,KAAAA,UAAA,EAChB5E,MAAKgE,UAAYW,KF6KjBnC,IAAK,WACLP,MAAO,WEnKP,MAAOjC,MAAKiC,MAAMb,cFiLlBoB,IAAK,UACLP,MAAO,WEtKP,MAAOjC,MAAK8E,eF2KT/B,IAgBXtD,GAAOD,QAAUA,EAAQ,aAEtBuF,SAAS,SAAS,IAAI","file":"wrap.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*! wrap v0.1.0 | https://github.com/ryanmorr/wrap */\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.wrap = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.getType = getType;\nexports.getHashCode = getHashCode;\nexports.getIterator = getIterator;\n/**\r\n * Common variables\r\n */\nvar toString = {}.toString;\n\n/**\r\n * Get the internal [[Class]] of an object\r\n *\r\n * @param {*} obj\r\n * @return {String}\r\n * @api private\r\n */\nfunction getType(obj) {\n    return toString.call(obj).slice(8, -1).toLowerCase();\n}\n\n/**\r\n * Generate a hash code for an object\r\n * based on its value/indexed items/properties\r\n *\r\n * @param {*} obj\r\n * @return {Number}\r\n * @api private\r\n */\nfunction getHashCode(obj) {\n    var hash = 0;\n    var type = getType(obj);\n    switch (type) {\n        case 'null':\n        case 'undefined':\n            return 0;\n        case 'array':\n            for (var i = 0, len = obj.length; i < len; i++) {\n                hash += getHashCode(i + getHashCode(obj[i]));\n            }\n            return hash;\n        case 'object':\n            for (var prop in obj) {\n                hash += getHashCode(prop + getHashCode(obj[prop]));\n            }\n            return hash;\n        default:\n            var str = obj.toString();\n            for (var _i = 0, _len = str.length; _i < _len; _i++) {\n                hash = (hash << 5) - hash + str.charCodeAt(_i) & 0xFFFFFFFF;\n            }\n            return hash;\n    }\n}\n\n/**\r\n * Get an iterator function for an array or\r\n * object\r\n *\r\n * @param {Array|Object} value\r\n * @param {String} type\r\n * @return {Function}\r\n * @api private\r\n */\nfunction getIterator(value, type) {\n    if (type === 'array') {\n        return function () {\n            var index = 0;\n            var length = value.length;\n            return {\n                next: function next() {\n                    if (index < length) {\n                        return { value: value[index++] };\n                    }\n                    return { done: true };\n                }\n            };\n        };\n    }\n    return function () {\n        var index = 0;\n        var items = Object.keys(value);\n        var length = items.length;\n        return {\n            next: function next() {\n                if (index < length) {\n                    var key = items[index++];\n                    return { value: [key, value[key]] };\n                }\n                return { done: true };\n            }\n        };\n    };\n}\n\n},{}],2:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\r\nmport dependencies\r\nn\n\nexports.default = wrap;\n\nvar _util = require('./util');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * Common variables\r\n */\nvar supportsIterator = typeof Symbol === 'function' && Symbol.iterator;\n\n/**\r\n * Helper class that wraps a variable to provide\r\n * abstracted utilities\r\n *\r\n * @class Wrapper\r\n * @api public\r\n */\n\nvar Wrapper = function () {\n\n    /**\r\n     * Instantiate the class and provide\r\n     * the variable to wrap\r\n     *\r\n     * @param {*} value\r\n     * @api public\r\n     */\n    function Wrapper(value) {\n        _classCallCheck(this, Wrapper);\n\n        this.set(value);\n        this.debugging = false;\n    }\n\n    /**\r\n     * Set the internal value\r\n     *\r\n     * @param {*} value\r\n     * @api public\r\n     */\n\n\n    _createClass(Wrapper, [{\n        key: 'set',\n        value: function set(value) {\n            if (this.debugging) {\n                debugger; // eslint-disable-line no-debugger\n            }\n            this.value = value;\n            var type = this.type(value);\n            if (supportsIterator && !(Symbol.iterator in this) && (type === 'array' || type === 'object')) {\n                this[Symbol.iterator] = (0, _util.getIterator)(value, type);\n            }\n            if ('listeners' in this) {\n                this.listeners.forEach(function (fn) {\n                    return fn(value);\n                });\n            }\n        }\n\n        /**\r\n         * Get the internal value\r\n         *\r\n         * @return {*}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'get',\n        value: function get() {\n            if (this.debugging) {\n                debugger; // eslint-disable-line no-debugger\n            }\n            return this.value;\n        }\n\n        /**\r\n         * Get the type of the internal value\r\n         *\r\n         * @return {String}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'type',\n        value: function type() {\n            return (0, _util.getType)(this.value);\n        }\n\n        /**\r\n         * Check if the type of the internal value\r\n         * matches the provided type\r\n         *\r\n         * @param {String} type\r\n         * @return {Boolean}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'is',\n        value: function is(type) {\n            return this.type(this.value) === type.toLowerCase();\n        }\n\n        /**\r\n         * Check if the internal value is strictly\r\n         * equal to the provided object\r\n         *\r\n         * @param {*} obj\r\n         * @return {Boolean}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'equals',\n        value: function equals(obj) {\n            return this.value === obj;\n        }\n\n        /**\r\n         * Nullify the internal value\r\n         *\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'release',\n        value: function release() {\n            this.set(null);\n        }\n\n        /**\r\n         * Convert the internal value to a JSON\r\n         * string\r\n         *\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'toJSON',\n        value: function toJSON() {\n            return JSON.stringify(this.value);\n        }\n\n        /**\r\n         * Add a callback function to be invoked\r\n         * everytime the internal value is changed\r\n         *\r\n         * @param {Function} fn\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'observe',\n        value: function observe(fn) {\n            if (!('listeners' in this)) {\n                this.listeners = [];\n            }\n            this.listeners.push(fn);\n        }\n\n        /**\r\n         * Generate a unique hash code for the\r\n         * internal value\r\n         *\r\n         * @return {Number}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'hashCode',\n        value: function hashCode() {\n            return (0, _util.getHashCode)(this.value);\n        }\n\n        /**\r\n         * Check if the internal value passes or\r\n         * fails a condition\r\n         *\r\n         * @param {Function} fn\r\n         * @return {Boolean}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'assert',\n        value: function assert(fn) {\n            return fn(this.value);\n        }\n\n        /**\r\n         * Return an identical clone of the\r\n         * internal value\r\n         *\r\n         * @return {Boolean}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'clone',\n        value: function clone() {\n            return JSON.parse(JSON.stringify(this.value));\n        }\n\n        /**\r\n         * Log a message to the console\r\n         *\r\n         * @param {String} msg\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'log',\n        value: function log(msg) {\n            /* eslint-disable no-console */\n            if (console && console.log) {\n                console.log(this.value, msg);\n            }\n            /* eslint-enable no-console */\n        }\n\n        /**\r\n         * Throw an error\r\n         *\r\n         * @param {String} msg\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'error',\n        value: function error(msg) {\n            throw new Error(msg);\n        }\n\n        /**\r\n         * Turn debugging mode on and off\r\n         *\r\n         * @param {Boolean} debug\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'debug',\n        value: function debug() {\n            var _debug = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n            this.debugging = _debug;\n        }\n\n        /**\r\n         * Return a string representation for the\r\n         * internal value\r\n         *\r\n         * @return {String}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'toString',\n        value: function toString() {\n            return this.value.toString();\n        }\n\n        /**\r\n         * Return an integer representation when\r\n         * the internal value is converted to a\r\n         * primitive\r\n         *\r\n         * @return {Number}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'valueOf',\n        value: function valueOf() {\n            return this.hashCode();\n        }\n    }]);\n\n    return Wrapper;\n}();\n\n/**\r\n * Wrap a variable to provide abstracted\r\n * utilities\r\n *\r\n * @param {*} value (optional)\r\n * @return {Wrapper}\r\n * @api public\r\n */\n\n\nfunction wrap(value) {\n    return new Wrapper(value);\n}\nmodule.exports = exports['default'];\n\n},{\"./util\":1}]},{},[2])(2)\n});\n\n","/**\r\n * Common variables\r\n */\r\nconst toString = {}.toString;\r\n\r\n/**\r\n * Get the internal [[Class]] of an object\r\n *\r\n * @param {*} obj\r\n * @return {String}\r\n * @api private\r\n */\r\nexport function getType(obj) {\r\n    return toString.call(obj).slice(8, -1).toLowerCase();\r\n}\r\n\r\n/**\r\n * Generate a hash code for an object\r\n * based on its value/indexed items/properties\r\n *\r\n * @param {*} obj\r\n * @return {Number}\r\n * @api private\r\n */\r\nexport function getHashCode(obj) {\r\n    let hash = 0;\r\n    const type = getType(obj);\r\n    switch (type) {\r\n        case 'null':\r\n        case 'undefined':\r\n            return 0;\r\n        case 'array':\r\n            for (let i = 0, len = obj.length; i < len; i++) {\r\n                hash += getHashCode(i + getHashCode(obj[i]));\r\n            }\r\n            return hash;\r\n        case 'object':\r\n            for (const prop in obj) {\r\n                hash += getHashCode(prop + getHashCode(obj[prop]));\r\n            }\r\n            return hash;\r\n        default:\r\n            const str = obj.toString();\r\n            for (let i = 0, len = str.length; i < len; i++) {\r\n                hash = (((hash << 5) - hash) + str.charCodeAt(i)) & 0xFFFFFFFF;\r\n            }\r\n            return hash;\r\n    }\r\n}\r\n\r\n/**\r\n * Get an iterator function for an array or\r\n * object\r\n *\r\n * @param {Array|Object} value\r\n * @param {String} type\r\n * @return {Function}\r\n * @api private\r\n */\r\nexport function getIterator(value, type) {\r\n    if (type === 'array') {\r\n        return () => {\r\n            let index = 0;\r\n            const length = value.length;\r\n            return {\r\n                next() {\r\n                    if (index < length) {\r\n                        return {value: value[index++]};\r\n                    }\r\n                    return {done: true};\r\n                }\r\n            };\r\n        };\r\n    }\r\n    return () => {\r\n        let index = 0;\r\n        const items = Object.keys(value);\r\n        const length = items.length;\r\n        return {\r\n            next() {\r\n                if (index < length) {\r\n                    const key = items[index++];\r\n                    return {value: [key, value[key]]};\r\n                }\r\n                return {done: true};\r\n            }\r\n        };\r\n    };\r\n}\r\n","/**\r\n * Import dependencies\r\n */\r\nimport { getType, getHashCode, getIterator } from './util';\r\n\r\n/**\r\n * Common variables\r\n */\r\nconst supportsIterator = typeof Symbol === 'function' && Symbol.iterator;\r\n\r\n/**\r\n * Helper class that wraps a variable to provide\r\n * abstracted utilities\r\n *\r\n * @class Wrapper\r\n * @api public\r\n */\r\nclass Wrapper {\r\n\r\n    /**\r\n     * Instantiate the class and provide\r\n     * the variable to wrap\r\n     *\r\n     * @param {*} value\r\n     * @api public\r\n     */\r\n    constructor(value) {\r\n        this.set(value);\r\n        this.debugging = false;\r\n    }\r\n\r\n    /**\r\n     * Set the internal value\r\n     *\r\n     * @param {*} value\r\n     * @api public\r\n     */\r\n    set(value) {\r\n        if (this.debugging) {\r\n            debugger; // eslint-disable-line no-debugger\r\n        }\r\n        this.value = value;\r\n        const type = this.type(value);\r\n        if (supportsIterator\r\n            && !(Symbol.iterator in this)\r\n            && (type === 'array' || type === 'object')) {\r\n            this[Symbol.iterator] = getIterator(value, type);\r\n        }\r\n        if ('listeners' in this) {\r\n            this.listeners.forEach((fn) => fn(value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the internal value\r\n     *\r\n     * @return {*}\r\n     * @api public\r\n     */\r\n    get() {\r\n        if (this.debugging) {\r\n            debugger; // eslint-disable-line no-debugger\r\n        }\r\n        return this.value;\r\n    }\r\n\r\n    /**\r\n     * Get the type of the internal value\r\n     *\r\n     * @return {String}\r\n     * @api public\r\n     */\r\n    type() {\r\n        return getType(this.value);\r\n    }\r\n\r\n    /**\r\n     * Check if the type of the internal value\r\n     * matches the provided type\r\n     *\r\n     * @param {String} type\r\n     * @return {Boolean}\r\n     * @api public\r\n     */\r\n    is(type) {\r\n        return this.type(this.value) === type.toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Check if the internal value is strictly\r\n     * equal to the provided object\r\n     *\r\n     * @param {*} obj\r\n     * @return {Boolean}\r\n     * @api public\r\n     */\r\n    equals(obj) {\r\n        return this.value === obj;\r\n    }\r\n\r\n    /**\r\n     * Nullify the internal value\r\n     *\r\n     * @api public\r\n     */\r\n    release() {\r\n        this.set(null);\r\n    }\r\n\r\n    /**\r\n     * Convert the internal value to a JSON\r\n     * string\r\n     *\r\n     * @api public\r\n     */\r\n    toJSON() {\r\n        return JSON.stringify(this.value);\r\n    }\r\n\r\n    /**\r\n     * Add a callback function to be invoked\r\n     * everytime the internal value is changed\r\n     *\r\n     * @param {Function} fn\r\n     * @api public\r\n     */\r\n    observe(fn) {\r\n        if (!('listeners' in this)) {\r\n            this.listeners = [];\r\n        }\r\n        this.listeners.push(fn);\r\n    }\r\n\r\n    /**\r\n     * Generate a unique hash code for the\r\n     * internal value\r\n     *\r\n     * @return {Number}\r\n     * @api public\r\n     */\r\n    hashCode() {\r\n        return getHashCode(this.value);\r\n    }\r\n\r\n    /**\r\n     * Check if the internal value passes or\r\n     * fails a condition\r\n     *\r\n     * @param {Function} fn\r\n     * @return {Boolean}\r\n     * @api public\r\n     */\r\n    assert(fn) {\r\n        return fn(this.value);\r\n    }\r\n\r\n    /**\r\n     * Return an identical clone of the\r\n     * internal value\r\n     *\r\n     * @return {Boolean}\r\n     * @api public\r\n     */\r\n    clone() {\r\n        return JSON.parse(JSON.stringify(this.value));\r\n    }\r\n\r\n    /**\r\n     * Log a message to the console\r\n     *\r\n     * @param {String} msg\r\n     * @api public\r\n     */\r\n    log(msg) {\r\n        /* eslint-disable no-console */\r\n        if (console && console.log) {\r\n            console.log(this.value, msg);\r\n        }\r\n        /* eslint-enable no-console */\r\n    }\r\n\r\n    /**\r\n     * Throw an error\r\n     *\r\n     * @param {String} msg\r\n     * @api public\r\n     */\r\n    error(msg) {\r\n        throw new Error(msg);\r\n    }\r\n\r\n    /**\r\n     * Turn debugging mode on and off\r\n     *\r\n     * @param {Boolean} debug\r\n     * @api public\r\n     */\r\n    debug(debug = true) {\r\n        this.debugging = debug;\r\n    }\r\n\r\n    /**\r\n     * Return a string representation for the\r\n     * internal value\r\n     *\r\n     * @return {String}\r\n     * @api public\r\n     */\r\n    toString() {\r\n        return this.value.toString();\r\n    }\r\n\r\n    /**\r\n     * Return an integer representation when\r\n     * the internal value is converted to a\r\n     * primitive\r\n     *\r\n     * @return {Number}\r\n     * @api public\r\n     */\r\n    valueOf() {\r\n        return this.hashCode();\r\n    }\r\n}\r\n\r\n/**\r\n * Wrap a variable to provide abstracted\r\n * utilities\r\n *\r\n * @param {*} value (optional)\r\n * @return {Wrapper}\r\n * @api public\r\n */\r\nexport default function wrap(value) {\r\n    return new Wrapper(value);\r\n}\r\n"]}